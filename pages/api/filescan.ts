// pages/api/filescan.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import axios from 'axios';
import formidable from 'formidable';
import fs from 'fs';
import FormData from 'form-data';

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }

  const form = formidable();

  form.parse(req, async (err, fields, files) => {
    if (err) {
      console.error('Error parsing the file upload:', err);
      return res.status(500).json({ message: 'Server error processing file upload' });
    }

    // Assume there's a single file, and it's available under "file"
    const fileArray = Array.isArray(files.file) ? files.file : [files.file];
    const uploadedFile = fileArray.find(f => f) as formidable.File | undefined;

    // Check if the file exists
    if (!uploadedFile) {
      return res.status(400).json({ message: 'No file uploaded' });
    }

    try {
      const formData = new FormData();
      formData.append('file', fs.createReadStream(uploadedFile.filepath));

      const response = await axios({
        method: 'post',
        url: 'https://www.virustotal.com/api/v3/files',
        headers: {
          'x-apikey': process.env.NEXT_PUBLIC_VT_API_KEY, // Your VirusTotal API Key
          ...formData.getHeaders(),
        },
        data: formData,
      });

      // Cleanup uploaded file after sending it
      fs.unlink(uploadedFile.filepath, (unlinkErr) => {
        if (unlinkErr) console.error('Error removing temporary file:', unlinkErr);
      });

      // Forward the VirusTotal API response to the client
      res.status(200).json(response.data);
    } catch (error) {
      console.error('Error forwarding file to VirusTotal:', error);
      res.status(500).json({ message: error });
    }
  });
};