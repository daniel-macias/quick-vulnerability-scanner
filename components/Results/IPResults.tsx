import React, { FC, useEffect, useState } from 'react';
import ReactApexChart from 'react-apexcharts';
import { ApexOptions } from 'apexcharts';

import { downloadJson } from '@/utils/jsonUtils';
import { unixTimestampToDateString } from '@/utils/dateUtils';
import { TbFaceIdError } from "react-icons/tb";

interface IPResultsProps {
  data: any;
}


interface StackedSeriesType {
  name: string;
  data: number[];
}

const IPResults: FC<IPResultsProps> = ({ data }) => {
  const [generatedError, setGeneratedError] = useState("");
  const [stackedSeries, setStackedSeries] = useState<StackedSeriesType[]>([]);
  const [donutSeries, setDonutSeries] = useState<number[]>([]);

  const donutChartOptions: ApexOptions = {
    chart: {
      type: 'donut',
      dropShadow: {
        enabled: true,
      },
      
    },
    
    labels: ['Harmless', 'Malicious', 'Suspicious', 'Timeout', 'Malware Not Detected'], // Example labels
    colors: ['#00E396', '#FF4560', '#FEB019', '#A5978B', '#008FFB'],
    dataLabels: {
      enabled: true,
      style: {
        fontSize: '14px', // Adjust font size as needed
        colors: ['#ffffff'], // Text color
        fontWeight: '400'
      },
      background: {
        enabled: true,
        foreColor: '#fff', // Foreground color for the label text
        borderColor: '#fff', // Border color
        borderWidth: 2, // Border width
        borderRadius: 0, // Border radius for rounded corners
        padding: 4, // Padding around the text
        opacity: 0.2, // Background opacity
      },
      dropShadow: {
        enabled: true,
        top: 1,
        left: 1,
        blur: 5,
        opacity: 0.45,
      }
    },
    responsive: [{
      breakpoint: 480,
      
      options: {
        chart: {
          width: "100%",
        },
        legend: {
          position: 'bottom',
          labels: {
            colors: '#ffffff', // This directly sets the legend text color
            useSeriesColors: false // Ensure the series colors are not used for text
          }
        },
      },
    }],
    stroke: {
      show: false,
    },
    legend: {
      labels: {
        colors: '#ffffff', // Ensuring the text color is white for all screen sizes
        useSeriesColors: false,
      },
    },
  };


  const stackeOptions: ApexOptions = {
    chart: {
      type: 'bar',
      stacked: true,
      toolbar: {
        show: false
      },
    },
    colors: ['#00E396', '#FF4560'], // Custom colors for "Harmless" and "Malicious"
    plotOptions: {
      bar: {
        horizontal: true,
        barHeight: '100%', // Adjust as needed
        dataLabels: {
          position: 'center', // Position data labels in the center of each bar
        },
      },
    },
    dataLabels: {
      enabled: true,
      textAnchor: 'start',
      style: {
        colors: ['#fff'],
      },
      offsetX: 0,
      dropShadow: {
        enabled: true
      }
    },
    stroke: {
      width: 0
    },
    grid: {
      show: false,
    },
    xaxis: {
      categories: [''],
      labels: {
        show: false,
      },
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
    },
    yaxis: {
      show: false
    },
    legend: {
      position: 'top',
      horizontalAlign: 'center',
      labels: {
        colors: ['#fff','#fff'], // Legend label colors
        useSeriesColors: false
      }
    },
    
    fill: {
      opacity: 1
    },
  };

  useEffect(() => {
    
    if(data.data){
      setGeneratedError("");
      setDonutSeries([
        data.data.attributes.last_analysis_stats.harmless, 
        data.data.attributes.last_analysis_stats.malicious, 
        data.data.attributes.last_analysis_stats.suspicious, 
        data.data.attributes.last_analysis_stats.timeout, 
        data.data.attributes.last_analysis_stats.undetected]);
      setStackedSeries([{
        name: 'Harmless',
        data: [data.data.attributes.total_votes.harmless] 
      }, {
        name: 'Malicious',
        data: [data.data.attributes.total_votes.malicious] 
      }]);
    }else{
      setGeneratedError(data);
    }
  }, [data]);

  

  return (
    
    <div className=" grid md:grid-cols-5 max-h-screen-xl mx-auto">
      {/* Left Top */}
      {data.data && data.data.id && (
      <>
      <div className="grid md:grid-rows-6 md:col-span-3 ">
        <div className="md:row-span-3 bg-[#28282d] h-full rounded-md pt-4">
          <ReactApexChart options={donutChartOptions} series={donutSeries} type="donut" width="380" />
        </div>

        {/* Left Bottom */}
        <div className="md:row-span-3 bg-[#28282d] h-full rounded-md">
          <h3 className='text-center'>Reputation Votes</h3>
          <ReactApexChart options={stackeOptions} series={stackedSeries} type="bar" height={"100"} />
        </div>
      </div>
      {/* Right Half */}
      <div className="grid md:col-span-2 text-[#d4d3d8] text-xs pb-10 text-center">
        <div className="bg-[#3b3b43] p-4 rounded-lg w-full">
            <h3 className='text-[#ffffff] text-sm'>Owner</h3>
            <p className='pb-4'>{data.data.attributes.as_owner}</p>
            <p className='text-[#ffffff]'>Country: {data.data.attributes.country}</p>
            <img className="mx-auto pb-4" src={`https://flagsapi.com/${data.data.attributes.country}/flat/32.png`} alt="Country Flag" />
            <p className='text-[#ffffff] text-sm'>Last Analysis</p>
            <p className='pb-4'>{unixTimestampToDateString(data.data.attributes.last_analysis_date)}</p>
            <p className='text-[#ffffff] text-sm'>Last HTTPS Certificate</p>
            <p className='pb-4'>{unixTimestampToDateString(data.data.attributes.last_https_certificate_date)}</p>
            <p className='text-[#ffffff] text-sm'>Network</p>
            <p className='pb-4'>{data.data.attributes.network}</p>
            <p className='text-[#ffffff] text-sm'>Regional Internet Registry</p>
            <p className='pb-4'>{data.data.attributes.regional_internet_registry}</p>
            <p className='text-[#ffffff] text-sm'>VirusTotal Reputation Score</p>
            <p className='pb-4'>{data.data.attributes.reputation}</p>
            <button onClick={() => downloadJson(data, "ipresults.json")} className="inline-block bg-blue-500 text-white px-2 py-2 rounded-md text-xs w-full">
                Download Full Report
            </button>
        </div>
              

      </div>
      </>)}

      {generatedError !== "" && (
        <div className="grid md:col-span-5"> 
          <div className="flex flex-col items-center text-center py-8">
            <p className="px-4">Error: The IP provided is not valid</p>
            <TbFaceIdError size={50} className="text-[#e65252]"/>
          </div>     
        </div>
      )}
    </div>
  )
}

export default IPResults